// Script de diagnostic pour les notifications push
import 'package:flutter/material.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

class NotificationDebugger {
  static Future<void> debugNotifications() async {
    debugPrint('üîç [DEBUG] D√©but du diagnostic des notifications...\n');

    // 1. V√©rifier Firebase Messaging
    debugPrint('1Ô∏è‚É£ V√©rification Firebase Messaging...');
    try {
      final messaging = FirebaseMessaging.instance;
      debugPrint('‚úÖ Firebase Messaging instance cr√©√©e');
      
      // V√©rifier les permissions
      final settings = await messaging.getNotificationSettings();
      debugPrint('üì± Permissions de notification:');
      debugPrint('   - Alert: ${settings.alert}');
      debugPrint('   - Badge: ${settings.badge}');
      debugPrint('   - Sound: ${settings.sound}');
      debugPrint('   - Authorization status: ${settings.authorizationStatus}');
      
      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        debugPrint('‚úÖ Permissions accord√©es - Les notifications push devraient fonctionner');
      } else {
        debugPrint('‚ùå Permissions refus√©es - Demander les permissions');
        final newSettings = await messaging.requestPermission(
          alert: true,
          badge: true,
          sound: true,
        );
        debugPrint('üì± Nouvelles permissions: ${newSettings.authorizationStatus}');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur Firebase Messaging: $e');
    }

    // 2. V√©rifier le token FCM
    debugPrint('\n2Ô∏è‚É£ V√©rification du token FCM...');
    try {
      final token = await FirebaseMessaging.instance.getToken();
      if (token != null) {
        debugPrint('‚úÖ Token FCM obtenu: ${token.substring(0, 30)}...');
      } else {
        debugPrint('‚ùå Token FCM non obtenu');
      }
    } catch (e) {
      debugPrint('‚ùå Erreur token FCM: $e');
    }

    // 3. V√©rifier les notifications locales
    debugPrint('\n3Ô∏è‚É£ V√©rification des notifications locales...');
    try {
      final localNotifications = FlutterLocalNotificationsPlugin();
      
      // Configuration Android
      const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );
      
      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );
      
      await localNotifications.initialize(initSettings);
      debugPrint('‚úÖ Notifications locales initialis√©es');
      
      // Cr√©er le canal Android
      const channel = AndroidNotificationChannel(
        'art_luxury_bus_channel',
        'Art Luxury Bus Notifications',
        description: 'Notifications de l\'application Art Luxury Bus',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
        showBadge: true,
      );
      
      final androidPlugin = localNotifications.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();
      
      if (androidPlugin != null) {
        await androidPlugin.createNotificationChannel(channel);
        debugPrint('‚úÖ Canal Android cr√©√©: ${channel.id}');
      }
      
      // Tester une notification locale
      debugPrint('\n4Ô∏è‚É£ Test d\'une notification locale...');
      await localNotifications.show(
        999,
        'üß™ Test Notification Locale',
        'Ceci est un test de notification locale',
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'art_luxury_bus_channel',
            'Art Luxury Bus Notifications',
            channelDescription: 'Notifications de l\'application Art Luxury Bus',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
            icon: '@mipmap/ic_launcher',
            playSound: true,
            enableVibration: true,
            enableLights: true,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
      );
      debugPrint('‚úÖ Notification locale envoy√©e - V√©rifiez votre √©cran de notification');
      
    } catch (e) {
      debugPrint('‚ùå Erreur notifications locales: $e');
    }

    // 5. Configurer les listeners Firebase
    debugPrint('\n5Ô∏è‚É£ Configuration des listeners Firebase...');
    try {
      // Listener pour les messages en premier plan
      FirebaseMessaging.onMessage.listen((RemoteMessage message) {
        debugPrint('üì± [DEBUG] Message re√ßu en premier plan:');
        debugPrint('   - Titre: ${message.notification?.title}');
        debugPrint('   - Corps: ${message.notification?.body}');
        debugPrint('   - Donn√©es: ${message.data}');
      });

      // Listener pour les messages en arri√®re-plan
      FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
        debugPrint('üì± [DEBUG] App ouverte via notification:');
        debugPrint('   - Titre: ${message.notification?.title}');
        debugPrint('   - Corps: ${message.notification?.body}');
        debugPrint('   - Donn√©es: ${message.data}');
      });

      debugPrint('‚úÖ Listeners Firebase configur√©s');
    } catch (e) {
      debugPrint('‚ùå Erreur configuration listeners: $e');
    }

    debugPrint('\nüéØ [DEBUG] Diagnostic termin√© !');
    debugPrint('üìã R√©sum√©:');
    debugPrint('   - Si vous voyez une notification locale ‚Üí Les notifications locales fonctionnent');
    debugPrint('   - Si vous ne voyez pas de notification ‚Üí V√©rifiez les param√®tres de notification de votre t√©l√©phone');
    debugPrint('   - Pour tester les notifications push ‚Üí Envoyez une notification depuis le serveur');
  }
}
