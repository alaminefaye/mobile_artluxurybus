import 'dart:io';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import '../models/video_advertisement_model.dart';
import '../utils/api_config.dart';

class VideoAdvertisementService {
  static String? _token;

  /// D√©finir le token d'authentification
  static void setToken(String token) {
    _token = token;
    debugPrint('üîë [VideoAdvertisementService] Token d√©fini');
  }

  /// Supprimer le token
  static void clearToken() {
    _token = null;
    debugPrint('üîë [VideoAdvertisementService] Token supprim√©');
  }

  /// Headers communs pour les requ√™tes
  Map<String, String> _getHeaders({bool isMultipart = false}) {
    final headers = <String, String>{
      if (!isMultipart) 'Content-Type': 'application/json',
      'Accept': 'application/json',
      if (_token != null) 'Authorization': 'Bearer $_token',
    };
    return headers;
  }

  // ========== ROUTES PUBLIQUES ==========

  /// R√©cup√©rer toutes les vid√©os actives (Public)
  Future<List<VideoAdvertisement>> getActiveVideos() async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] R√©cup√©ration des vid√©os actives');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/video-advertisements');
      final response = await http.get(url, headers: _getHeaders());
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          final List<dynamic> videosData = data['data'] as List;
          final videos = videosData.map((json) => VideoAdvertisement.fromJson(json)).toList();
          
          debugPrint('‚úÖ [VideoAdvertisementService] ${videos.length} vid√©os r√©cup√©r√©es');
          return videos;
        }
      }
      throw Exception('Erreur lors de la r√©cup√©ration des vid√©os');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur: $e');
      rethrow;
    }
  }

  /// R√©cup√©rer une vid√©o sp√©cifique par son ID
  Future<VideoAdvertisement> getVideoById(int id) async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] R√©cup√©ration de la vid√©o $id');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/video-advertisements/$id');
      final response = await http.get(url, headers: _getHeaders());
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          return VideoAdvertisement.fromJson(data['data']);
        }
      }
      throw Exception('Vid√©o non trouv√©e');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur: $e');
      rethrow;
    }
  }

  /// Enregistrer une vue pour une vid√©o
  Future<void> recordView(int videoId) async {
    try {
      final url = Uri.parse('${ApiConfig.baseUrl}/video-advertisements/$videoId/view');
      await http.post(url, headers: _getHeaders());
      debugPrint('‚úÖ [VideoAdvertisementService] Vue enregistr√©e pour vid√©o $videoId');
    } catch (e) {
      debugPrint('‚ö†Ô∏è [VideoAdvertisementService] Erreur enregistrement vue: $e');
    }
  }

  /// Rechercher des vid√©os
  Future<List<VideoAdvertisement>> searchVideos(String query) async {
    try {
      final url = Uri.parse('${ApiConfig.baseUrl}/video-advertisements/search/query?q=$query');
      final response = await http.get(url, headers: _getHeaders());
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          final List<dynamic> videosData = data['data'] as List;
          return videosData.map((json) => VideoAdvertisement.fromJson(json)).toList();
        }
      }
      throw Exception('Erreur lors de la recherche');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur recherche: $e');
      rethrow;
    }
  }

  // ========== ROUTES ADMIN (PROT√âG√âES) ==========

  /// R√©cup√©rer toutes les vid√©os (actives et inactives) - Admin
  Future<List<VideoAdvertisement>> getAllVideos() async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] R√©cup√©ration de toutes les vid√©os (Admin)');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements');
      final response = await http.get(url, headers: _getHeaders());
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          final List<dynamic> videosData = data['data'] as List;
          final videos = videosData.map((json) => VideoAdvertisement.fromJson(json)).toList();
          
          debugPrint('‚úÖ [VideoAdvertisementService] ${videos.length} vid√©os r√©cup√©r√©es (Admin)');
          return videos;
        }
      } else if (response.statusCode == 401) {
        throw Exception('Non authentifi√©');
      }
      throw Exception('Erreur lors de la r√©cup√©ration des vid√©os');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur: $e');
      rethrow;
    }
  }

  /// Cr√©er une nouvelle publicit√© vid√©o - Admin
  Future<VideoAdvertisement> createVideo({
    required String title,
    String? description,
    required File videoFile,
    int? displayOrder,
    bool isActive = true,
  }) async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] Cr√©ation d\'une vid√©o');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements');
      
      var request = http.MultipartRequest('POST', url);
      request.headers.addAll(_getHeaders(isMultipart: true));
      
      request.fields['title'] = title;
      if (description != null) request.fields['description'] = description;
      if (displayOrder != null) request.fields['display_order'] = displayOrder.toString();
      request.fields['is_active'] = isActive ? '1' : '0';
      
      request.files.add(await http.MultipartFile.fromPath(
        'video',
        videoFile.path,
      ));

      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 201 || response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          debugPrint('‚úÖ [VideoAdvertisementService] Vid√©o cr√©√©e avec succ√®s');
          return VideoAdvertisement.fromJson(data['data']);
        }
      } else if (response.statusCode == 401) {
        throw Exception('Non authentifi√©');
      } else if (response.statusCode == 422) {
        final data = jsonDecode(response.body);
        throw Exception('Erreur de validation: ${data['errors']}');
      }
      throw Exception('Erreur lors de la cr√©ation');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur cr√©ation: $e');
      rethrow;
    }
  }

  /// Mettre √† jour une publicit√© vid√©o - Admin
  Future<VideoAdvertisement> updateVideo({
    required int id,
    String? title,
    String? description,
    File? videoFile,
    int? displayOrder,
    bool? isActive,
  }) async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] Mise √† jour de la vid√©o $id');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements/$id');
      
      var request = http.MultipartRequest('POST', url);
      request.headers.addAll(_getHeaders(isMultipart: true));
      
      if (title != null) request.fields['title'] = title;
      if (description != null) request.fields['description'] = description;
      if (displayOrder != null) request.fields['display_order'] = displayOrder.toString();
      if (isActive != null) request.fields['is_active'] = isActive ? '1' : '0';
      
      if (videoFile != null) {
        request.files.add(await http.MultipartFile.fromPath(
          'video',
          videoFile.path,
        ));
      }

      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          debugPrint('‚úÖ [VideoAdvertisementService] Vid√©o mise √† jour avec succ√®s');
          return VideoAdvertisement.fromJson(data['data']);
        }
      } else if (response.statusCode == 401) {
        throw Exception('Non authentifi√©');
      } else if (response.statusCode == 404) {
        throw Exception('Vid√©o non trouv√©e');
      } else if (response.statusCode == 422) {
        final data = jsonDecode(response.body);
        throw Exception('Erreur de validation: ${data['errors']}');
      }
      throw Exception('Erreur lors de la mise √† jour');
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur mise √† jour: $e');
      rethrow;
    }
  }

  /// Supprimer une publicit√© vid√©o - Admin
  Future<bool> deleteVideo(int id) async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] Suppression de la vid√©o $id');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements/$id');
      final response = await http.delete(url, headers: _getHeaders());

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          debugPrint('‚úÖ [VideoAdvertisementService] Vid√©o supprim√©e avec succ√®s');
          return true;
        }
      } else if (response.statusCode == 401) {
        throw Exception('Non authentifi√©');
      } else if (response.statusCode == 404) {
        throw Exception('Vid√©o non trouv√©e');
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur suppression: $e');
      return false;
    }
  }

  /// Activer/D√©sactiver une vid√©o - Admin
  Future<bool> toggleVideoStatus(int id) async {
    try {
      debugPrint('üìπ [VideoAdvertisementService] Toggle statut vid√©o $id');
      
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements/$id/toggle-status');
      final response = await http.patch(url, headers: _getHeaders());

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['success'] == true) {
          debugPrint('‚úÖ [VideoAdvertisementService] Statut mis √† jour');
          return true;
        }
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur toggle: $e');
      return false;
    }
  }

  /// Suppression multiple de vid√©os - Admin
  Future<bool> deleteMultipleVideos(List<int> ids) async {
    try {
      final url = Uri.parse('${ApiConfig.baseUrl}/admin/video-advertisements/bulk-delete');
      final response = await http.post(
        url,
        headers: _getHeaders(),
        body: jsonEncode({'ids': ids}),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data['success'] == true;
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå [VideoAdvertisementService] Erreur suppression multiple: $e');
      return false;
    }
  }
}
