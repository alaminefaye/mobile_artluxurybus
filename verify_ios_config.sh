#!/bin/bash

# Script de v√©rification compl√®te de la configuration iOS
# Usage: ./verify_ios_config.sh

echo "üîç V√âRIFICATION COMPL√àTE - Configuration iOS Notifications"
echo "=========================================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

# 1. V√©rifier firebase_options.dart
echo -e "${BLUE}üì± 1. V√âRIFICATION FICHIERS FLUTTER${NC}"
echo "-----------------------------------"

if [ -f "lib/firebase_options.dart" ]; then
    echo -e "${GREEN}‚úÖ firebase_options.dart trouv√©${NC}"
    if grep -q "iosBundleId: 'com.example.artluxurybus'" lib/firebase_options.dart; then
        echo -e "${GREEN}   ‚úÖ Bundle ID iOS configur√©${NC}"
    else
        echo -e "${RED}   ‚ùå Bundle ID iOS manquant ou incorrect${NC}"
        ((ERRORS++))
    fi
    if grep -q "DefaultFirebaseOptions.currentPlatform" lib/firebase_options.dart; then
        echo -e "${GREEN}   ‚úÖ currentPlatform d√©fini${NC}"
    fi
else
    echo -e "${RED}‚ùå firebase_options.dart MANQUANT${NC}"
    echo -e "${YELLOW}   ‚Üí Fichier cr√©√© automatiquement${NC}"
    ((ERRORS++))
fi

if [ -f "lib/services/notification_service.dart" ]; then
    echo -e "${GREEN}‚úÖ notification_service.dart trouv√©${NC}"
    if grep -q "import '../firebase_options.dart'" lib/services/notification_service.dart; then
        echo -e "${GREEN}   ‚úÖ Import firebase_options pr√©sent${NC}"
    else
        echo -e "${RED}   ‚ùå Import firebase_options MANQUANT${NC}"
        ((ERRORS++))
    fi
    if grep -q "DefaultFirebaseOptions.currentPlatform" lib/services/notification_service.dart; then
        echo -e "${GREEN}   ‚úÖ Utilise DefaultFirebaseOptions${NC}"
    else
        echo -e "${RED}   ‚ùå N'utilise pas DefaultFirebaseOptions${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${RED}‚ùå notification_service.dart MANQUANT${NC}"
    ((ERRORS++))
fi

if [ -f "lib/main.dart" ]; then
    echo -e "${GREEN}‚úÖ main.dart trouv√©${NC}"
    if grep -q "NotificationService.initialize()" lib/main.dart; then
        echo -e "${GREEN}   ‚úÖ NotificationService initialis√©${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  NotificationService non initialis√©${NC}"
        ((WARNINGS++))
    fi
fi

echo ""

# 2. V√©rifier fichiers iOS
echo -e "${BLUE}üçé 2. V√âRIFICATION FICHIERS iOS${NC}"
echo "-------------------------------"

if [ -f "ios/Runner/GoogleService-Info.plist" ]; then
    echo -e "${GREEN}‚úÖ GoogleService-Info.plist trouv√©${NC}"
    BUNDLE_ID=$(grep -A 1 "BUNDLE_ID" ios/Runner/GoogleService-Info.plist | grep "string" | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
    echo -e "   Bundle ID: ${BLUE}$BUNDLE_ID${NC}"
    
    if [ "$BUNDLE_ID" != "com.example.artluxurybus" ]; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  Bundle ID diff√©rent de com.example.artluxurybus${NC}"
        ((WARNINGS++))
    fi
else
    echo -e "${RED}‚ùå GoogleService-Info.plist MANQUANT${NC}"
    ((ERRORS++))
fi

if [ -f "ios/Runner/Info.plist" ]; then
    echo -e "${GREEN}‚úÖ Info.plist trouv√©${NC}"
    if grep -q "UIBackgroundModes" ios/Runner/Info.plist; then
        echo -e "${GREEN}   ‚úÖ UIBackgroundModes configur√©${NC}"
        if grep -q "remote-notification" ios/Runner/Info.plist; then
            echo -e "${GREEN}   ‚úÖ remote-notification activ√©${NC}"
        else
            echo -e "${RED}   ‚ùå remote-notification MANQUANT${NC}"
            ((ERRORS++))
        fi
    else
        echo -e "${RED}   ‚ùå UIBackgroundModes MANQUANT${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${RED}‚ùå Info.plist MANQUANT${NC}"
    ((ERRORS++))
fi

if [ -f "ios/Runner/AppDelegate.swift" ]; then
    echo -e "${GREEN}‚úÖ AppDelegate.swift trouv√©${NC}"
    if grep -q "FirebaseApp.configure()" ios/Runner/AppDelegate.swift; then
        echo -e "${GREEN}   ‚úÖ Firebase configur√©${NC}"
    else
        echo -e "${RED}   ‚ùå Firebase NON configur√©${NC}"
        ((ERRORS++))
    fi
    if grep -q "registerForRemoteNotifications" ios/Runner/AppDelegate.swift; then
        echo -e "${GREEN}   ‚úÖ Remote notifications enregistr√©es${NC}"
    else
        echo -e "${RED}   ‚ùå Remote notifications NON enregistr√©es${NC}"
        ((ERRORS++))
    fi
    if grep -q "didRegisterForRemoteNotificationsWithDeviceToken" ios/Runner/AppDelegate.swift; then
        echo -e "${GREEN}   ‚úÖ Callback APNs token pr√©sent${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Callback APNs token manquant (diagnostic)${NC}"
        ((WARNINGS++))
    fi
else
    echo -e "${RED}‚ùå AppDelegate.swift MANQUANT${NC}"
    ((ERRORS++))
fi

if [ -f "ios/Runner/Runner.entitlements" ]; then
    echo -e "${GREEN}‚úÖ Runner.entitlements trouv√©${NC}"
    if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
        echo -e "${GREEN}   ‚úÖ aps-environment configur√©${NC}"
        ENV=$(grep -A 1 "aps-environment" ios/Runner/Runner.entitlements | grep "string" | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        echo -e "   Environnement: ${BLUE}$ENV${NC}"
    else
        echo -e "${RED}   ‚ùå aps-environment MANQUANT${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Runner.entitlements MANQUANT${NC}"
    echo -e "${YELLOW}   ‚Üí Fichier cr√©√© automatiquement${NC}"
    ((WARNINGS++))
fi

echo ""

# 3. V√©rifier d√©pendances
echo -e "${BLUE}üì¶ 3. V√âRIFICATION D√âPENDANCES${NC}"
echo "------------------------------"

if [ -f "pubspec.yaml" ]; then
    if grep -q "firebase_core:" pubspec.yaml; then
        VERSION=$(grep "firebase_core:" pubspec.yaml | awk '{print $2}')
        echo -e "${GREEN}‚úÖ firebase_core: $VERSION${NC}"
    else
        echo -e "${RED}‚ùå firebase_core MANQUANT${NC}"
        ((ERRORS++))
    fi
    
    if grep -q "firebase_messaging:" pubspec.yaml; then
        VERSION=$(grep "firebase_messaging:" pubspec.yaml | awk '{print $2}')
        echo -e "${GREEN}‚úÖ firebase_messaging: $VERSION${NC}"
    else
        echo -e "${RED}‚ùå firebase_messaging MANQUANT${NC}"
        ((ERRORS++))
    fi
    
    if grep -q "flutter_local_notifications:" pubspec.yaml; then
        VERSION=$(grep "flutter_local_notifications:" pubspec.yaml | awk '{print $2}')
        echo -e "${GREEN}‚úÖ flutter_local_notifications: $VERSION${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  flutter_local_notifications manquant (optionnel)${NC}"
        ((WARNINGS++))
    fi
fi

if [ -f "ios/Podfile.lock" ]; then
    echo -e "${GREEN}‚úÖ Podfile.lock trouv√©${NC}"
    if grep -q "Firebase/Messaging" ios/Podfile.lock; then
        VERSION=$(grep "Firebase/Messaging" ios/Podfile.lock | head -1 | awk '{print $2}' | tr -d '()')
        echo -e "${GREEN}   ‚úÖ Firebase/Messaging: $VERSION${NC}"
    else
        echo -e "${RED}   ‚ùå Firebase/Messaging NON install√©${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Podfile.lock manquant - Pods non install√©s${NC}"
    echo -e "${YELLOW}   ‚Üí Ex√©cuter: cd ios && pod install${NC}"
    ((WARNINGS++))
fi

echo ""

# 4. R√©sum√©
echo -e "${BLUE}üìä 4. R√âSUM√â${NC}"
echo "----------"
echo ""

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ CONFIGURATION PARFAITE!${NC}"
    echo ""
    echo "Tous les fichiers sont correctement configur√©s."
    echo ""
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  CONFIGURATION BONNE AVEC AVERTISSEMENTS${NC}"
    echo ""
    echo -e "Erreurs: ${GREEN}0${NC}"
    echo -e "Avertissements: ${YELLOW}$WARNINGS${NC}"
    echo ""
else
    echo -e "${RED}‚ùå CONFIGURATION INCOMPL√àTE${NC}"
    echo ""
    echo -e "Erreurs: ${RED}$ERRORS${NC}"
    echo -e "Avertissements: ${YELLOW}$WARNINGS${NC}"
    echo ""
fi

# 5. Actions requises
echo -e "${BLUE}üîß 5. ACTIONS REQUISES${NC}"
echo "--------------------"
echo ""

echo "‚úÖ Code Flutter: Corrig√© et pr√™t"
echo ""
echo "‚ö†Ô∏è  ACTIONS CRITIQUES RESTANTES:"
echo ""
echo "1. üîë Configurer APNs dans Firebase Console"
echo "   ‚Üí https://console.firebase.google.com/project/artluxurybus-d7a63"
echo "   ‚Üí Project Settings > Cloud Messaging"
echo "   ‚Üí Uploader la cl√© APNs (.p8)"
echo ""
echo "2. üçé Configurer Xcode"
echo "   ‚Üí cd ios && open Runner.xcworkspace"
echo "   ‚Üí Signing & Capabilities"
echo "   ‚Üí Ajouter 'Push Notifications'"
echo "   ‚Üí Ajouter 'Background Modes' > Remote notifications"
echo ""
echo "3. üß™ Tester"
echo "   ‚Üí flutter clean && flutter pub get"
echo "   ‚Üí cd ios && pod install && cd .."
echo "   ‚Üí flutter run --verbose"
echo ""

echo "=========================================================="
echo "üìñ Voir CHECKLIST_IOS_NOTIFICATIONS.md pour les d√©tails"
echo "=========================================================="
