import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:translator/translator.dart'; // üåç Traduction automatique
import '../models/message_model.dart';
import '../screens/announcement_display_screen.dart';
import 'audio_focus_manager.dart';

/// Service pour g√©rer les annonces vocales r√©p√©t√©es
class VoiceAnnouncementService {
  static final VoiceAnnouncementService _instance =
      VoiceAnnouncementService._internal();
  factory VoiceAnnouncementService() => _instance;
  VoiceAnnouncementService._internal();

  final FlutterTts _flutterTts = FlutterTts();
  final GoogleTranslator _translator = GoogleTranslator(); // üåç Traducteur
  final Map<int, Timer> _activeTimers = {};
  final Map<int, MessageModel> _activeAnnouncements = {};
  final Map<int, OverlayEntry?> _activeOverlays =
      {}; // Pour garder les overlays/dialogues affich√©s (nullable car on utilise maintenant showDialog)
  final Map<int, bool> _shouldContinue =
      {}; // Pour contr√¥ler si l'annonce doit continuer
  final Map<int, int> _repeatCounters = {}; // üåç Compteur de r√©p√©titions pour alternance FR/EN
  final AudioFocusManager _audioFocusManager = AudioFocusManager();

  bool _isInitialized = false;
  bool _isSpeaking = false;

  // Configuration par d√©faut
  static const int defaultRepeatIntervalSeconds =
      5; // R√©p√©ter toutes les 5 SECONDES
  static const String prefKeyVoiceEnabled = 'voice_announcements_enabled';
  static const String prefKeyRepeatInterval = 'voice_repeat_interval';
  static const String prefKeyLanguage = 'voice_language';
  static const String prefKeyVolume = 'voice_volume';
  static const String prefKeyPitch = 'voice_pitch';
  static const String prefKeyRate = 'voice_rate';

  /// Initialiser le service TTS
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üîä [VoiceService] Initialisation...');

      // Charger les pr√©f√©rences
      final prefs = await SharedPreferences.getInstance();
      final language = prefs.getString(prefKeyLanguage) ?? 'fr-FR';
      final volume = prefs.getDouble(prefKeyVolume) ??
          0.9; // Volume l√©g√®rement r√©duit pour plus de naturel
      final pitch = prefs.getDouble(prefKeyPitch) ??
          0.95; // Pitch l√©g√®rement plus bas pour voix masculine naturelle
      final rate = prefs.getDouble(prefKeyRate) ??
          0.48; // Vitesse un peu ralentie pour meilleure compr√©hension

      // Configurer TTS pour une voix plus naturelle
      await _flutterTts.setLanguage(language);
      await _flutterTts.setVolume(volume);
      await _flutterTts.setPitch(pitch);
      await _flutterTts.setSpeechRate(rate);
      
      // ‚≠ê CRITICAL: Activer l'attente synchrone de la fin de lecture
      await _flutterTts.awaitSpeakCompletion(true);

      // Callbacks
      _flutterTts.setStartHandler(() {
        _isSpeaking = true;
        debugPrint('üîä [VoiceService] D√©but de l\'annonce vocale');
      });

      _flutterTts.setCompletionHandler(() {
        _isSpeaking = false;
        debugPrint('‚úÖ [VoiceService] Annonce vocale termin√©e');
      });

      _flutterTts.setErrorHandler((msg) {
        _isSpeaking = false;
        debugPrint('‚ùå [VoiceService] Erreur TTS: $msg');
      });

      _flutterTts.setPauseHandler(() {
        debugPrint('‚è∏Ô∏è [VoiceService] Annonce mise en pause');
      });

      _flutterTts.setContinueHandler(() {
        debugPrint('‚ñ∂Ô∏è [VoiceService] Annonce reprise');
      });

      _flutterTts.setCancelHandler(() {
        _isSpeaking = false;
        debugPrint('‚èπÔ∏è [VoiceService] Annonce annul√©e');
      });

      _isInitialized = true;
      debugPrint('‚úÖ [VoiceService] Initialis√© avec succ√®s');
      debugPrint(
          '   Langue: $language, Volume: $volume, Pitch: $pitch, Rate: $rate');
    } catch (e) {
      debugPrint('‚ùå [VoiceService] Erreur d\'initialisation: $e');
    }
  }

  /// V√©rifier si les annonces vocales sont activ√©es
  Future<bool> isEnabled() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(prefKeyVoiceEnabled) ?? true; // Activ√© par d√©faut
  }

  /// Activer/D√©sactiver les annonces vocales
  Future<void> setEnabled(bool enabled) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(prefKeyVoiceEnabled, enabled);

    if (!enabled) {
      // Arr√™ter toutes les annonces en cours
      await stopAllAnnouncements();
    }

    debugPrint(
        'üîä [VoiceService] Annonces vocales ${enabled ? "activ√©es" : "d√©sactiv√©es"}');
  }

  /// Obtenir l'intervalle de r√©p√©tition (en secondes)
  Future<int> getRepeatInterval() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt(prefKeyRepeatInterval) ?? defaultRepeatIntervalSeconds;
  }

  /// D√©finir l'intervalle de r√©p√©tition (en secondes)
  Future<void> setRepeatInterval(int seconds) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(prefKeyRepeatInterval, seconds);
    debugPrint('üîä [VoiceService] Intervalle de r√©p√©tition: $seconds secondes');
  }

  /// D√©marrer l'annonce vocale r√©p√©t√©e pour un message
  Future<void> startAnnouncement(MessageModel message,
      [BuildContext? context]) async {
    if (!await isEnabled()) {
      debugPrint('‚ö†Ô∏è [VoiceService] Annonces vocales d√©sactiv√©es');
      return;
    }

    if (!message.isAnnonce) {
      debugPrint('‚ö†Ô∏è [VoiceService] Message n\'est pas une annonce');
      return;
    }

    if (!message.isCurrentlyActive) {
      debugPrint('‚ö†Ô∏è [VoiceService] Annonce non active');
      debugPrint('   - active: ${message.active}');
      debugPrint('   - isExpired: ${message.isExpired}');
      debugPrint('   - dateDebut: ${message.dateDebut}');
      debugPrint('   - dateFin: ${message.dateFin}');
      debugPrint('   - now: ${DateTime.now()}');
      return;
    }

    await initialize();

    // Arr√™ter l'annonce existante si elle existe
    await stopAnnouncement(message.id);

    // Ajouter aux annonces actives
    _activeAnnouncements[message.id] = message;
    _shouldContinue[message.id] = true;
    _repeatCounters[message.id] = 0; // Initialiser le compteur √† 0

    debugPrint(
        ' [VoiceService] D√©marrage annonce #${message.id}: "${message.titre}"');

    // Afficher la belle page d'annonce si un contexte est fourni
    if (context != null) {
      if (context.mounted) {
        debugPrint('‚úÖ [VoiceService] Context disponible et mont√© - affichage overlay');
        _showAnnouncementDisplay(context, message);
      } else {
        debugPrint('‚ö†Ô∏è [VoiceService] Context fourni mais NON mont√© - pas d\'overlay');
      }
    } else {
      debugPrint('‚ö†Ô∏è [VoiceService] Aucun context fourni - AUDIO SEULEMENT (pas d\'overlay visuel)');
    }

    // Notifier AudioFocusManager pour mettre en pause les vid√©os
    _audioFocusManager.startVoiceAnnouncement();

    // D√©marrer la boucle de lecture : lire ‚Üí attendre fin ‚Üí pause 5s ‚Üí recommencer
    _startAnnouncementLoop(message);

    debugPrint(' [VoiceService] Annonce programm√©e avec boucle continue');
  }

  /// Boucle de lecture d'annonce : lit tout le texte, pause 5s, recommence
  Future<void> _startAnnouncementLoop(MessageModel message) async {
    while (_shouldContinue[message.id] == true) {
      // V√©rifier si les annonces vocales sont toujours activ√©es
      if (!await isEnabled()) {
        debugPrint(' [VoiceService] Annonces vocales d√©sactiv√©es, arr√™t');
        await stopAnnouncement(message.id);
        break;
      }

      // V√©rifier si l'annonce est encore active (pas expir√©e) avec v√©rification en temps r√©el
      final now = DateTime.now();
      final isExpired = message.dateFin != null && now.isAfter(message.dateFin!);
      final isNotStarted = message.dateDebut != null && now.isBefore(message.dateDebut!);
      
      if (!message.active || isExpired || isNotStarted) {
        debugPrint(' [VoiceService] Annonce #${message.id} expir√©e ou inactive, arr√™t automatique');
        debugPrint('   - active: ${message.active}');
        debugPrint('   - isExpired: $isExpired (dateFin: ${message.dateFin})');
        debugPrint('   - isNotStarted: $isNotStarted (dateDebut: ${message.dateDebut})');
        debugPrint('   - now: $now');
        await stopAnnouncement(message.id);
        break;
      }

      debugPrint(' [VoiceService] Lecture COMPL√àTE de l\'annonce #${message.id}...');

      // D√©terminer la langue selon le compteur de r√©p√©titions
      int counter = _repeatCounters[message.id] ?? 0;
      bool isFrench = (counter ~/ 2) % 2 == 0; // 0-1: FR, 2-3: EN, 4-5: FR, etc.
      String language = isFrench ? 'fr-FR' : 'en-US';
      
      debugPrint(' [VoiceService] Lecture COMPL√àTE #${counter + 1} en ${isFrench ? "fran√ßais" : "anglais"}...');

      // Lire l'annonce COMPL√àTEMENT dans la langue appropri√©e
      await _speakAnnouncement(message, language);
      
      // Incr√©menter le compteur
      _repeatCounters[message.id] = counter + 1;
      
      debugPrint(' [VoiceService] Lecture TERMIN√âE pour annonce #${message.id}');

      // Si on doit toujours continuer, pause de 5 secondes avant la prochaine r√©p√©tition
      if (_shouldContinue[message.id] == true) {
        debugPrint(' [VoiceService] Pause de 5 secondes avant r√©p√©tition...');
        
        // Pause intelligente avec v√©rification d'expiration (1 seconde √† la fois)
        for (int i = 0; i < 5; i++) {
          await Future.delayed(const Duration(seconds: 1));
          
          // V√©rifier pendant la pause si l'annonce est toujours active avec v√©rification en temps r√©el
          final now = DateTime.now();
          final isExpired = message.dateFin != null && now.isAfter(message.dateFin!);
          final isNotStarted = message.dateDebut != null && now.isBefore(message.dateDebut!);
          
          if (_shouldContinue[message.id] != true || !message.active || isExpired || isNotStarted) {
            debugPrint(' [VoiceService] Annonce expir√©e pendant la pause, arr√™t automatique');
            debugPrint('   - active: ${message.active}');
            debugPrint('   - isExpired: $isExpired (dateFin: ${message.dateFin})');
            debugPrint('   - now: $now');
            await stopAnnouncement(message.id);
            return; // Sortir compl√®tement de la boucle
          }
        }
      }
    }
  }

  /// üåç Configurer la voix selon la langue (voix de qualit√©)
  Future<void> _configureVoiceForLanguage(String language) async {
    try {
      await _flutterTts.setLanguage(language);
      
      if (language == 'en-US') {
        // üéôÔ∏è Configuration pour une BELLE VOIX ANGLAISE (naturelle et lente)
        await _flutterTts.setVolume(0.85); // Volume r√©duit pour plus de douceur
        await _flutterTts.setPitch(0.9); // Pitch l√©g√®rement plus bas pour voix plus grave et naturelle
        await _flutterTts.setSpeechRate(0.38); // Vitesse RALENTIE pour meilleure compr√©hension
        
        // Essayer de s√©lectionner une voix f√©minine de qualit√© sur Android/iOS
        // Sur Android: com.google.android.tts (Google Text-to-Speech)
        // Sur iOS: com.apple.ttsbundle.Samantha-compact / com.apple.speech.synthesis.voice.samantha
        debugPrint('üéôÔ∏è [VoiceService] Voix anglaise configur√©e (naturelle et lente)');
      } else {
        // üéôÔ∏è Configuration pour le fran√ßais (AM√âLIOR√âE - plus naturelle)
        await _flutterTts.setVolume(0.85); // Volume doux et agr√©able
        await _flutterTts.setPitch(0.88); // Pitch plus bas pour voix masculine naturelle et chaleureuse
        await _flutterTts.setSpeechRate(0.40); // Vitesse ralentie pour meilleure articulation
        debugPrint('üéôÔ∏è [VoiceService] Voix fran√ßaise configur√©e (naturelle et fluide)');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è [VoiceService] Erreur configuration voix: $e');
    }
  }

  /// Lire une annonce vocale COMPL√àTEMENT jusqu'√† la fin dans la langue sp√©cifi√©e
  Future<void> _speakAnnouncement(MessageModel message, String language) async {
    // Arr√™ter toute lecture en cours
    if (_isSpeaking) {
      debugPrint(' [VoiceService] Arr√™t de l\'annonce en cours...');
      await _flutterTts.stop();
      await Future.delayed(const Duration(milliseconds: 500));
      _isSpeaking = false;
    }

    try {
      // üåç Configurer la langue et la voix
      await _configureVoiceForLanguage(language);
      
      // üåç Traduire le contenu si n√©cessaire
      String titre = message.titre;
      String contenu = message.contenu;
      
      if (language == 'en-US') {
        // Traduire en anglais
        try {
          debugPrint('üåç [VoiceService] Traduction en anglais...');
          var titreTranslated = await _translator.translate(titre, from: 'fr', to: 'en');
          var contenuTranslated = await _translator.translate(contenu, from: 'fr', to: 'en');
          titre = titreTranslated.text;
          contenu = contenuTranslated.text;
          debugPrint('‚úÖ [VoiceService] Traduction r√©ussie');
          debugPrint('   Titre EN: $titre');
        } catch (e) {
          debugPrint('‚ö†Ô∏è [VoiceService] Erreur traduction: $e - Utilisation texte original');
        }
      }
      
      // Construire le texte √† lire de mani√®re plus naturelle
      String textToSpeak = '';

      // Ajouter un pr√©fixe court et naturel selon la langue
      if (language == 'fr-FR') {
        textToSpeak += 'Attention, ';
      } else {
        textToSpeak += 'Attention, '; // "Attention" fonctionne en anglais aussi
      }

      // Ajouter le titre traduit avec une pause
      textToSpeak += '$titre... ';

      // Nettoyer le contenu pour le rendre plus naturel
      // Remplacer les sauts de ligne par des pauses
      contenu = contenu.replaceAll('\n', '... ');
      contenu = contenu.replaceAll('\r', '');
      // Ajouter des pauses apr√®s les points
      contenu = contenu.replaceAll('.', '... ');
      // Ajouter des pauses apr√®s les virgules
      contenu = contenu.replaceAll(',', ', ');

      textToSpeak += contenu;

      debugPrint('üîä [VoiceService] D√©but lecture: "$textToSpeak"');
      debugPrint('üìè [VoiceService] Longueur texte: ${textToSpeak.length} caract√®res');

      // Marquer le d√©but de la lecture
      _isSpeaking = true;

      // ‚≠ê CRITICAL: Cette ligne attend maintenant COMPL√àTEMENT la fin de la lecture
      // gr√¢ce √† awaitSpeakCompletion(true) configur√© dans initialize()
      await _flutterTts.speak(textToSpeak);
      
      // La lecture est maintenant COMPL√àTEMENT termin√©e
      _isSpeaking = false;
      debugPrint('‚úÖ [VoiceService] Lecture termin√©e avec succ√®s');
      
    } catch (e) {
      _isSpeaking = false;
      debugPrint('‚ùå [VoiceService] Erreur lors de la lecture: $e');
    }
  }

  /// Afficher la belle page d'annonce via Dialog (plus fiable qu'Overlay)
  void _showAnnouncementDisplay(BuildContext context, MessageModel message) {
    try {
      debugPrint('üì± [VoiceService] Tentative affichage dialogue pour annonce #${message.id}');

      // Utiliser showDialog au lieu d'Overlay (plus fiable)
      showDialog(
        context: context,
        barrierDismissible: false, // Ne peut pas √™tre ferm√© en touchant dehors
        builder: (dialogContext) => PopScope(
          canPop: false, // Emp√™cher le retour arri√®re
          child: AnnouncementDisplayScreen(
            message: message,
            onClose: () {
              // L'utilisateur ferme manuellement
              Navigator.of(dialogContext).pop();
              // Arr√™ter aussi l'annonce vocale
              stopAnnouncement(message.id);
            },
          ),
        ),
      ).then((_) {
        // Nettoyage quand le dialogue se ferme
        _activeOverlays.remove(message.id);
        debugPrint('üî¥ [VoiceService] Dialogue ferm√© pour annonce #${message.id}');
      });

      // Marquer comme affich√© (pas besoin de OverlayEntry, juste un flag)
      _activeOverlays[message.id] = null; // On utilise la map juste comme tracker

      debugPrint('‚úÖ [VoiceService] Dialogue affich√© pour annonce #${message.id}');
    } catch (e) {
      debugPrint('‚ùå [VoiceService] ERREUR affichage dialogue: $e');
      debugPrint('   Stack trace: ${StackTrace.current}');
    }
  }

  /// Arr√™ter une annonce sp√©cifique
  Future<void> stopAnnouncement(int messageId) async {
    debugPrint(' [VoiceService] Demande d\'arr√™t de l\'annonce #$messageId...');
    
    // Marquer qu'on doit arr√™ter la boucle
    _shouldContinue[messageId] = false;

    // Si une annonce est en cours de lecture, attendre qu'elle termine
    // avant d'arr√™ter compl√®tement (respect de la demande utilisateur)
    if (_isSpeaking) {
      debugPrint(' [VoiceService] Attente de la fin de la lecture en cours...');
      // Attendre max 3 secondes que la lecture actuelle se termine
      int waitCounter = 0;
      while (_isSpeaking && waitCounter < 30) {
        await Future.delayed(const Duration(milliseconds: 100));
        waitCounter++;
      }
      
      // Si toujours en cours apr√®s 3s, forcer l'arr√™t
      if (_isSpeaking) {
        debugPrint(' [VoiceService] Timeout - Arr√™t forc√© de la lecture');
        await _flutterTts.stop();
        _isSpeaking = false;
      } else {
        debugPrint(' [VoiceService] Lecture termin√©e proprement');
      }
    }

    // Nettoyer les timers
    if (_activeTimers.containsKey(messageId)) {
      _activeTimers[messageId]?.cancel();
      _activeTimers.remove(messageId);
    }

    // Retirer de la liste des annonces actives
    _activeAnnouncements.remove(messageId);

    // Si plus aucune annonce active, reprendre les vid√©os
    if (_activeAnnouncements.isEmpty) {
      _audioFocusManager.stopVoiceAnnouncement();
    }

    // Fermer l'overlay, m√™me si il n'y avait pas de timer
    if (_activeOverlays.containsKey(messageId)) {
      try {
        _activeOverlays[messageId]?.remove();
        _activeOverlays.remove(messageId);
        debugPrint(' [VoiceService] Overlay ferm√© pour message #$messageId');
      } catch (e) {
        debugPrint(' [VoiceService] Erreur fermeture overlay: $e');
        // Forcer le nettoyage m√™me en cas d'erreur
        _activeOverlays.remove(messageId);
      }
    }

    // Nettoyer les donn√©es
    _activeTimers.remove(messageId);
    _activeAnnouncements.remove(messageId);
    _activeOverlays.remove(messageId);
    _shouldContinue.remove(messageId);
    _repeatCounters.remove(messageId); // Nettoyer le compteur

    debugPrint(' [VoiceService] Annonce #$messageId compl√®tement arr√™t√©e');
  }

  /// Arr√™ter toutes les annonces
  Future<void> stopAllAnnouncements() async {
    debugPrint(
        ' [VoiceService] Arr√™t de toutes les annonces (${_activeTimers.length})');

    // Arr√™ter toutes les boucles
    for (var messageId in _shouldContinue.keys.toList()) {
      _shouldContinue[messageId] = false;
    }

    for (var timer in _activeTimers.values) {
      timer.cancel();
    }

    // Fermer tous les overlays/dialogues (les dialogues se ferment automatiquement)
    for (var overlay in _activeOverlays.values) {
      try {
        overlay?.remove(); // Utiliser ?. car maintenant nullable (dialogues n'ont pas de OverlayEntry)
      } catch (e) {
        debugPrint(' [VoiceService] Erreur fermeture overlay: $e');
      }
    }

    _activeTimers.clear();
    _activeAnnouncements.clear();
    _activeOverlays.clear();
    _shouldContinue.clear();
    _repeatCounters.clear(); // Nettoyer tous les compteurs

    if (_isSpeaking) {
      await _flutterTts.stop();
    }

    // Reprendre tous les audios
    // üîä Reprendre tous les audios
    _audioFocusManager.stopVoiceAnnouncement();
  }

  /// Obtenir la liste des annonces actives
  List<MessageModel> getActiveAnnouncements() {
    return _activeAnnouncements.values.toList();
  }

  /// V√©rifier si une annonce est en cours
  bool isAnnouncementActive(int messageId) {
    return _activeTimers.containsKey(messageId);
  }

  /// Lire un texte imm√©diatement (sans r√©p√©tition)
  Future<void> speakOnce(String text) async {
    await initialize();

    if (!await isEnabled()) {
      debugPrint('‚ö†Ô∏è [VoiceService] Annonces vocales d√©sactiv√©es');
      return;
    }

    if (_isSpeaking) {
      await _flutterTts.stop();
      await Future.delayed(const Duration(milliseconds: 500));
    }

    await _flutterTts.speak(text);
  }

  /// Arr√™ter la lecture en cours
  Future<void> stop() async {
    if (_isSpeaking) {
      await _flutterTts.stop();
    }
  }

  /// Mettre en pause
  Future<void> pause() async {
    if (_isSpeaking) {
      await _flutterTts.pause();
    }
  }

  /// Obtenir les langues disponibles
  Future<List<dynamic>> getAvailableLanguages() async {
    await initialize();
    return await _flutterTts.getLanguages;
  }

  /// D√©finir la langue
  Future<void> setLanguage(String language) async {
    await _flutterTts.setLanguage(language);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(prefKeyLanguage, language);
    debugPrint('üîä [VoiceService] Langue chang√©e: $language');
  }

  /// D√©finir le volume (0.0 √† 1.0)
  Future<void> setVolume(double volume) async {
    await _flutterTts.setVolume(volume);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble(prefKeyVolume, volume);
  }

  /// D√©finir le pitch (0.5 √† 2.0)
  Future<void> setPitch(double pitch) async {
    await _flutterTts.setPitch(pitch);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble(prefKeyPitch, pitch);
  }

  /// D√©finir la vitesse (0.0 √† 1.0)
  Future<void> setRate(double rate) async {
    await _flutterTts.setSpeechRate(rate);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble(prefKeyRate, rate);
  }

  /// Nettoyer les ressources
  Future<void> dispose() async {
    await stopAllAnnouncements();
    _isInitialized = false;
  }
}
