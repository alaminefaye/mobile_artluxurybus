import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/feedback_api_service.dart';
import '../services/device_info_service.dart';
import '../services/announcement_manager.dart';
import '../firebase_options.dart';

// Handler pour les notifications en arri√®re-plan
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // V√©rifier si Firebase est d√©j√† initialis√© pour √©viter l'erreur duplicate-app
  try {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  } catch (e) {
    if (e.toString().contains('duplicate-app')) {
      debugPrint('‚ÑπÔ∏è [Background Handler] Firebase d√©j√† initialis√©');
    } else {
      debugPrint('‚ö†Ô∏è [Background Handler] Erreur Firebase: $e');
    }
  }
  
  // Traiter la notification en arri√®re-plan
  await NotificationService._handleBackgroundMessage(message);
}

class NotificationService {
  static FirebaseMessaging? _messaging;
  static FlutterLocalNotificationsPlugin? _localNotifications;
  static StreamController<Map<String, dynamic>>? _notificationStreamController;
  static bool _bgHandlerRegistered = false;
  static String? _deviceId;

  // Stream pour √©couter les notifications
  static Stream<Map<String, dynamic>>? get notificationStream =>
      _notificationStreamController?.stream;

  /// Initialiser Firebase et les notifications
  static Future<void> initialize() async {
    try {
      debugPrint('üîî [NotificationService] D√©but initialisation...');

      // V√©rifier si Firebase est d√©j√† initialis√©
      try {
        await Firebase.initializeApp(
          options: DefaultFirebaseOptions.currentPlatform,
        );
        debugPrint('‚úÖ [NotificationService] Firebase initialis√©');
      } catch (e) {
        if (e.toString().contains('duplicate-app')) {
          debugPrint(
            '‚ÑπÔ∏è [NotificationService] Firebase d√©j√† initialis√©, on continue...',
          );
        } else {
          debugPrint(
            '‚ö†Ô∏è [NotificationService] Erreur Firebase (non bloquante): $e',
          );
          // Ne pas bloquer l'app si Firebase √©choue
        }
      }

      // R√©cup√©rer l'ID unique de l'appareil
      try {
        _deviceId = await DeviceInfoService().getDeviceId();
        debugPrint('üì± [NotificationService] Device ID: $_deviceId');
      } catch (e) {
        debugPrint(
          '‚ö†Ô∏è [NotificationService] Erreur r√©cup√©ration Device ID: $e',
        );
      }

      // Initialiser Firebase Messaging avec gestion d'erreur
      try {
        _messaging = FirebaseMessaging.instance;
        debugPrint('‚úÖ [NotificationService] Firebase Messaging initialis√©');
      } catch (e) {
        debugPrint(
          '‚ö†Ô∏è [NotificationService] Firebase Messaging non disponible: $e',
        );
        // Continuer sans notifications push
      }

      // Initialiser les notifications locales
      try {
        await _initializeLocalNotifications();
        debugPrint(
          '‚úÖ [NotificationService] Notifications locales initialis√©es',
        );
      } catch (e) {
        debugPrint(
          '‚ö†Ô∏è [NotificationService] Notifications locales non disponibles: $e',
        );
      }

      // Configurer le handler pour les notifications en arri√®re-plan (une seule fois)
      if (!_bgHandlerRegistered && _messaging != null) {
        try {
          FirebaseMessaging.onBackgroundMessage(
            _firebaseMessagingBackgroundHandler,
          );
          _bgHandlerRegistered = true;
          debugPrint('‚úÖ [NotificationService] Handler arri√®re-plan configur√©');
        } catch (e) {
          debugPrint(
            '‚ö†Ô∏è [NotificationService] Handler arri√®re-plan non configur√©: $e',
          );
        }
      }

      // Demander les permissions
      if (_messaging != null) {
        try {
          await _requestPermissions();
          debugPrint('‚úÖ [NotificationService] Permissions demand√©es');
        } catch (e) {
          debugPrint('‚ö†Ô∏è [NotificationService] Permissions non obtenues: $e');
        }
      }

      // Obtenir et enregistrer le token FCM
      if (_messaging != null) {
        try {
          await _getAndRegisterToken();
          debugPrint('‚úÖ [NotificationService] Token FCM obtenu');
        } catch (e) {
          debugPrint('‚ö†Ô∏è [NotificationService] Token FCM non obtenu: $e');
        }
      }

      // Configurer les listeners
      if (_messaging != null) {
        try {
          await _setupMessageHandlers();
          debugPrint('‚úÖ [NotificationService] Listeners configur√©s');
        } catch (e) {
          debugPrint('‚ö†Ô∏è [NotificationService] Listeners non configur√©s: $e');
        }
      }

      // Initialiser le stream controller
      _notificationStreamController =
          StreamController<Map<String, dynamic>>.broadcast();

      debugPrint(
        'üéâ [NotificationService] Initialisation compl√®te avec succ√®s !',
      );
    } catch (e, stackTrace) {
      debugPrint(
        '‚ùå [NotificationService] ERREUR lors de l\'initialisation: $e',
      );
      debugPrint('Stack trace: $stackTrace');
      // NE PAS faire crasher l'app - initialiser quand m√™me le stream
      _notificationStreamController =
          StreamController<Map<String, dynamic>>.broadcast();
    }
  }

  /// Initialiser les notifications locales
  static Future<void> _initializeLocalNotifications() async {
    _localNotifications = FlutterLocalNotificationsPlugin();

    // Cr√©er le canal de notification Android (requis pour Android 8.0+)
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'art_luxury_bus_channel', // ID du canal
      'Art Luxury Bus Notifications', // Nom du canal
      description: 'Notifications de l\'application Art Luxury Bus',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
      showBadge: true,
    );

    // Cr√©er le canal sur l'appareil Android
    final androidPlugin = _localNotifications!
        .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin
        >();

    if (androidPlugin != null) {
      await androidPlugin.createNotificationChannel(channel);
      debugPrint('‚úÖ [NotificationService] Canal Android cr√©√©: ${channel.id}');
    } else {
      debugPrint(
        '‚ùå [NotificationService] Impossible de cr√©er le canal Android',
      );
    }

    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
          requestAlertPermission: true,
          requestBadgePermission: true,
          requestSoundPermission: true,
        );

    const InitializationSettings initializationSettings =
        InitializationSettings(
          android: initializationSettingsAndroid,
          iOS: initializationSettingsIOS,
        );

    await _localNotifications!.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );
  }

  /// Demander les permissions de notification
  static Future<void> _requestPermissions() async {
    if (_messaging == null) return;

    NotificationSettings settings = await _messaging!.requestPermission(
      alert: true,
      badge: true,
      provisional: false,
      sound: true,
      announcement: false,
      carPlay: false,
      criticalAlert: false,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      // Permissions accord√©es pour les notifications
    } else if (settings.authorizationStatus ==
        AuthorizationStatus.provisional) {
      // Permissions provisoires accord√©es
    } else {
      // Permissions refus√©es par l'utilisateur
    }
  }

  /// Obtenir et enregistrer le token FCM
  static Future<String?> _getAndRegisterToken() async {
    if (_messaging == null) return null;

    try {
      String? token = await _messaging!.getToken();
      if (token != null) {
        // Token FCM obtenu avec succ√®s

        // Sauvegarder localement
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('fcm_token', token);

        // Enregistrer sur le serveur
        await _registerTokenWithServer(token);

        // √âcouter les changements de token
        _messaging!.onTokenRefresh.listen((newToken) {
          // Nouveau token FCM re√ßu - mise √† jour automatique
          _registerTokenWithServer(newToken);
        });

        return token;
      }
    } catch (e) {
      // Erreur lors de l'obtention du token FCM
    }
    return null;
  }

  /// Enregistrer le token sur le serveur
  static Future<void> _registerTokenWithServer(String token) async {
    try {
      final deviceInfoService = DeviceInfoService();

      // Obtenir les informations r√©elles de l'appareil
      final deviceType = await deviceInfoService.getDeviceType();
      final deviceId = await deviceInfoService.getDeviceId();

      debugPrint('üì± Enregistrement FCM Token avec device_id: $deviceId');
      debugPrint('üì± Type d\'appareil: $deviceType');

      final result = await FeedbackApiService.registerFcmToken(
        token,
        deviceType: deviceType,
        deviceId: deviceId,
      );

      if (result['success'] == true) {
        debugPrint('‚úÖ Token FCM enregistr√© avec succ√®s sur le serveur');
      } else {
        debugPrint(
          '‚ùå Erreur lors de l\'enregistrement du token: ${result['message']}',
        );
      }
    } catch (e) {
      debugPrint(
        '‚ùå Exception lors de l\'enregistrement du token sur le serveur: $e',
      );
    }
  }

  /// Configurer les handlers de messages
  static Future<void> _setupMessageHandlers() async {
    if (_messaging == null) return;

    // Messages re√ßus quand l'app est en premier plan
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      // Notification re√ßue en premier plan
      _handleForegroundMessage(message);
    });

    // Messages re√ßus quand l'app est ouverte via une notification
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      // App ouverte via notification
      _handleNotificationTap(message);
    });

    // V√©rifier si l'app a √©t√© lanc√©e via une notification
    RemoteMessage? initialMessage = await _messaging!.getInitialMessage();
    if (initialMessage != null) {
      // App lanc√©e via notification
      _handleNotificationTap(initialMessage);
    }
  }

  /// G√©rer les messages en premier plan
  static void _handleForegroundMessage(RemoteMessage message) {
    // üîä V√©rifier si c'est une annonce vocale UNIQUEMENT
    if (message.data['msg_type'] == 'annonce') {
      _handleAnnouncementMessage(message);
    }

    // Afficher une notification locale pour TOUTES les notifications
    _showLocalNotification(
      title: message.notification?.title ?? 'Art Luxury Bus',
      body: message.notification?.body ?? 'Nouvelle notification',
      data: message.data,
    );

    // Envoyer via le stream pour TOUTES les notifications
    _notificationStreamController?.add({
      'type': 'foreground',
      'title': message.notification?.title,
      'body': message.notification?.body,
      'data': message.data,
    });
  }

  /// üîä G√©rer les annonces vocales
  static Future<void> _handleAnnouncementMessage(RemoteMessage message) async {
    try {
      debugPrint('üîä [NotificationService] Annonce vocale re√ßue');

      // V√©rifier si l'annonce est destin√©e √† cet appareil
      final appareil = message.data['appareil']?.toString().trim();

      // Si pas d'appareil sp√©cifi√© ou 'tous', traiter l'annonce
      if (appareil == null ||
          appareil.isEmpty ||
          appareil.toLowerCase() == 'tous') {
        debugPrint('‚úÖ [NotificationService] Annonce pour tous les appareils');
      }
      // Si c'est la cat√©gorie 'mobile', traiter l'annonce
      else if (appareil.toLowerCase() == 'mobile') {
        debugPrint('‚úÖ [NotificationService] Annonce pour cat√©gorie mobile');
      }
      // V√©rifier si c'est l'identifiant unique de CET appareil
      else if (_deviceId != null && appareil == _deviceId) {
        debugPrint(
          '‚úÖ [NotificationService] Annonce pour cet appareil sp√©cifique',
        );
      }
      // V√©rifier si l'identifiant est dans une liste s√©par√©e par des virgules
      else if (appareil.contains(',')) {
        final deviceIds = appareil.split(',').map((e) => e.trim()).toList();
        if (_deviceId != null && deviceIds.contains(_deviceId)) {
          debugPrint(
            '‚úÖ [NotificationService] Annonce pour cet appareil (liste multiple)',
          );
        } else {
          debugPrint(
            '‚ö†Ô∏è [NotificationService] Annonce non destin√©e √† cet appareil (liste: $appareil, device_id: $_deviceId)',
          );
          return;
        }
      }
      // Sinon, ne pas traiter (autre cat√©gorie ou autre device_id)
      else {
        debugPrint(
          '‚ö†Ô∏è [NotificationService] Annonce non destin√©e √† cet appareil (appareil: $appareil, device_id: $_deviceId)',
        );
        return;
      }

      // D√©clencher imm√©diatement une v√©rification de l'AnnouncementManager
      final messageId = message.data['message_id'];
      if (messageId != null) {
        debugPrint(
          'üì¢ [NotificationService] D√©clenchement imm√©diat annonce #$messageId',
        );
        
        // D√©clencher le rafra√Æchissement imm√©diat de l'AnnouncementManager
        try {
          await AnnouncementManager().refresh();
          debugPrint('‚úÖ [NotificationService] AnnouncementManager rafra√Æchi imm√©diatement');
        } catch (e) {
          debugPrint('‚ö†Ô∏è [NotificationService] Impossible de rafra√Æchir AnnouncementManager: $e');
        }
      }
    } catch (e) {
      debugPrint('‚ùå [NotificationService] Erreur traitement annonce: $e');
    }
  }

  /// G√©rer les notifications en arri√®re-plan
  static Future<void> _handleBackgroundMessage(RemoteMessage message) async {
    // Message en arri√®re-plan re√ßu et trait√©

    // Traitement sp√©cifique en arri√®re-plan si n√©cessaire
    // Par exemple, sauvegarder en local, mettre √† jour un compteur, etc.
  }

  /// G√©rer le tap sur une notification
  static void _handleNotificationTap(RemoteMessage message) {
    // Notification cliqu√©e par l'utilisateur

    // Navigation selon le type de notification
    String type = message.data['type'] ?? '';

    // Envoyer via le stream pour navigation
    _notificationStreamController?.add({
      'type': 'tap',
      'notification_type': type,
      'title': message.notification?.title,
      'body': message.notification?.body,
      'data': message.data,
    });
  }

  /// Callback pour les notifications locales
  static void _onNotificationTap(NotificationResponse details) {
    // Notification locale cliqu√©e par l'utilisateur

    // Envoyer via le stream
    _notificationStreamController?.add({
      'type': 'local_tap',
      'payload': details.payload,
    });
  }

  /// Afficher une notification locale
  static Future<void> _showLocalNotification({
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    if (_localNotifications == null) return;

    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
          'art_luxury_bus_channel',
          'Art Luxury Bus Notifications',
          channelDescription: 'Notifications de l\'application Art Luxury Bus',
          importance: Importance.max,
          priority: Priority.high,
          showWhen: true,
          icon: '@mipmap/ic_launcher',
          playSound: true,
          enableVibration: true,
          enableLights: true,
          // color: Color(0xFF1976D2), // Bleu Art Luxury Bus
        );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await _localNotifications!.show(
      DateTime.now().millisecondsSinceEpoch.remainder(100000),
      title,
      body,
      platformChannelSpecifics,
      payload: data?.toString(),
    );
  }

  /// Obtenir le token FCM actuel
  static Future<String?> getCurrentToken() async {
    if (_messaging == null) return null;
    return await _messaging!.getToken();
  }

  /// Souscrire √† un topic
  static Future<void> subscribeToTopic(String topic) async {
    if (_messaging == null) return;
    try {
      await _messaging!.subscribeToTopic(topic);
      // Souscrit au topic avec succ√®s
    } catch (e) {
      // Erreur lors de la souscription au topic
    }
  }

  /// Se d√©sabonner d'un topic
  static Future<void> unsubscribeFromTopic(String topic) async {
    if (_messaging == null) return;
    try {
      await _messaging!.unsubscribeFromTopic(topic);
      // D√©sabonn√© du topic avec succ√®s
    } catch (e) {
      // Erreur lors du d√©sabonnement du topic
    }
  }

  /// Tester les notifications
  static Future<void> testNotification() async {
    debugPrint(
      'üîî [NotificationService] TEST - D√©but du test de notification...',
    );

    if (_localNotifications == null) {
      debugPrint(
        '‚ùå [NotificationService] TEST - Plugin de notifications locales non initialis√© !',
      );
      return;
    }

    debugPrint(
      '‚úÖ [NotificationService] TEST - Plugin OK, envoi de la notification...',
    );

    try {
      await _showLocalNotification(
        title: 'Test Notification',
        body: 'Ceci est un test des notifications push Art Luxury Bus üîî',
        data: {'type': 'test'},
      );
      
      debugPrint('‚úÖ [NotificationService] TEST - Notification locale envoy√©e');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] TEST - Erreur: $e');
    }
  }

  /// Tester les annonces vocales
  static Future<void> testAnnouncementPush() async {
    debugPrint('üé§ [NotificationService] TEST - Simulation notification d\'annonce...');
    
    try {
      // Simuler une notification d'annonce re√ßue
      final fakeMessage = RemoteMessage(
        data: {
          'msg_type': 'annonce',
          'type': 'message_notification',
          'message_id': '999',
          'appareil': 'mobile',
          'titre': 'Test Annonce',
          'contenu': 'Ceci est un test d\'annonce vocale pour v√©rifier le fonctionnement',
        },
        notification: const RemoteNotification(
          title: 'Test Annonce',
          body: 'Ceci est un test d\'annonce vocale',
        ),
      );
      
      // D√©clencher le traitement comme si c'√©tait une vraie notification
      await _handleAnnouncementMessage(fakeMessage);
      
      debugPrint('‚úÖ [NotificationService] TEST - Notification d\'annonce simul√©e');
    } catch (e) {
      debugPrint('‚ùå [NotificationService] TEST - Erreur simulation: $e');
    }
  }

  /// Nettoyer les ressources
  static Future<void> dispose() async {
    await _notificationStreamController?.close();
    _notificationStreamController = null;
  }
}
