import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'dart:async';
import 'package:vector_math/vector_math_64.dart' hide Colors;
import '../models/simple_loyalty_models.dart';

enum LoyaltyCardType { tickets, courriers, combined }

class LoyaltyCard extends StatefulWidget {
  final LoyaltyClient client;
  final double screenWidth;
  final double screenHeight;
  final LoyaltyCardType cardType;
  final ValueNotifier<bool>? showingDeparturesNotifier;

  const LoyaltyCard({
    super.key,
    required this.client,
    required this.screenWidth,
    required this.screenHeight,
    required this.cardType,
    this.showingDeparturesNotifier,
  });

  @override
  State<LoyaltyCard> createState() => _LoyaltyCardState();
}

class _LoyaltyCardState extends State<LoyaltyCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  bool _isFlipped = false;
  Timer? _autoFlipTimer;
  Timer? _departureTimer;
  int _currentView = 0; // 0 = front, 1 = back, 2 = departures
  int _flipCount = 0;
  bool _showingDepartures = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _animation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOutBack,
    ));
    
    // D√©marrer le timer pour le retournement automatique toutes les 5 secondes
    _startAutoFlip();
  }

  @override
  void dispose() {
    _autoFlipTimer?.cancel();
    _departureTimer?.cancel();
    _controller.dispose();
    super.dispose();
  }

  void _flip() {
    if (!_controller.isAnimating) {
      if (_isFlipped) {
        _controller.reverse();
      } else {
        _controller.forward();
      }
      setState(() {
        _isFlipped = !_isFlipped;
        _flipCount++;
        
        // Apr√®s 3 flips, afficher les d√©parts
        if (_flipCount >= 3 && !_showingDepartures) {
          _showingDepartures = true;
          _currentView = 2;
          _flipCount = 0;
          
          // Notifier le parent que les d√©parts sont affich√©s
          debugPrint('üöÄ [LoyaltyCard] Affichage du tableau des d√©parts - Notification envoy√©e');
          widget.showingDeparturesNotifier?.value = true;
          
          // Retour automatique apr√®s 1 minute
          _departureTimer?.cancel();
          _departureTimer = Timer(const Duration(minutes: 1), () {
            if (mounted) {
              setState(() {
                _showingDepartures = false;
                _currentView = 0;
                _isFlipped = false;
                _controller.reset();
              });
              // Notifier le parent que les d√©parts sont masqu√©s
              widget.showingDeparturesNotifier?.value = false;
            }
          });
        } else if (!_showingDepartures) {
          // Alterner entre front (0) et back (1)
          _currentView = _isFlipped ? 1 : 0;
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // Si on affiche les d√©parts, pas d'animation de flip
    if (_showingDepartures) {
      return _buildDeparturesBoard();
    }
    
    return GestureDetector(
      onTap: _flip,
      child: AnimatedBuilder(
        animation: _animation,
        builder: (context, child) {
          final angle = _animation.value * math.pi;
          final isShowingFront = angle < math.pi / 2;
          
          // Calcul de la perspective et de l'√©chelle
          const perspective = 0.002; // Perspective plus prononc√©e
          final scale = (1.0 - (math.sin(angle) * 0.1)).clamp(0.9, 1.0); // L√©ger r√©tr√©cissement au milieu
          final shadowOpacity = (math.sin(angle) * 0.3).clamp(0.0, 0.3); // Ombre dynamique
          
          return Stack(
            children: [
              // Ombre dynamique
              Positioned(
                top: 4,
                left: 4,
                right: 4,
                bottom: 4,
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(widget.screenWidth * 0.04),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: shadowOpacity),
                        spreadRadius: 2,
                        blurRadius: 20,
                        offset: Offset(0, 8 + (math.sin(angle) * 10)),
                      ),
                    ],
                  ),
                ),
              ),
              // Carte avec animation
              Transform(
                alignment: Alignment.center,
                transform: Matrix4.identity()
                  ..setEntry(3, 2, perspective)
                  ..scaleByVector3(Vector3(scale, scale, scale))
                  ..rotateY(isShowingFront ? angle : math.pi)
                  ..multiply(isShowingFront 
                      ? Matrix4.identity() 
                      : Matrix4.diagonal3Values(-1.0, 1.0, 1.0)),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(widget.screenWidth * 0.04),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.2),
                        spreadRadius: 1,
                        blurRadius: 10,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: isShowingFront ? _buildFrontCard() : _buildBackCard(),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildFrontCard() {
    return Container(
      width: double.infinity,
      height: widget.screenHeight * 0.32,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(widget.screenWidth * 0.04),
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF1A1A1A), // Noir profond
            Color(0xFF2D2D2D), // Gris fonc√©
            Color(0xFF1A1A1A),
          ],
          stops: [0.0, 0.5, 1.0],
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.3),
            spreadRadius: 3,
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Stack(
        children: [
          // Motif de carte de cr√©dit
          Positioned(
            right: -20,
            top: -20,
            child: Container(
              width: 100,
              height: 100,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.white.withValues(alpha: 0.05),
              ),
            ),
          ),
          Positioned(
            right: -50,
            bottom: -30,
            child: Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.white.withValues(alpha: 0.03),
              ),
            ),
          ),
          
          // Contenu principal
          Padding(
            padding: EdgeInsets.all(widget.screenWidth * 0.05),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Header avec logo et titre
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'CARTE FID√âLIT√â',
                          style: TextStyle(
                            color: Colors.white.withValues(alpha: 0.8),
                            fontSize: widget.screenWidth * 0.025,
                            fontWeight: FontWeight.w500,
                            letterSpacing: 1.2,
                          ),
                        ),
                        Text(
                          'ART LUXURY BUS',
                          style: TextStyle(
                            color: const Color(0xFFD4AF37), // Or
                            fontSize: widget.screenWidth * 0.035,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 1.0,
                          ),
                        ),
                      ],
                    ),
                    Container(
                      padding: EdgeInsets.all(widget.screenWidth * 0.02),
                      decoration: BoxDecoration(
                        color: const Color(0xFFD4AF37).withValues(alpha: 0.2),
                        borderRadius: BorderRadius.circular(widget.screenWidth * 0.02),
                      ),
                      child: Icon(
                        Icons.diamond,
                        color: const Color(0xFFD4AF37),
                        size: widget.screenWidth * 0.06,
                      ),
                    ),
                  ],
                ),
                
                SizedBox(height: widget.screenHeight * 0.01),
                
                // Num√©ro de carte stylis√©
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    for (int i = 0; i < 4; i++)
                      Text(
                        i == 0 ? widget.client.telephone.substring(0, 4) :
                        i == 1 ? '****' :
                        i == 2 ? '****' :
                        widget.client.telephone.substring(widget.client.telephone.length - 4),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: widget.screenWidth * 0.045,
                          fontWeight: FontWeight.w500,
                          letterSpacing: 2.0,
                        ),
                      ),
                  ],
                ),
                
                SizedBox(height: widget.screenHeight * 0.02),
                
                // Nom et points
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.client.nomComplet.toUpperCase(),
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: widget.screenWidth * 0.04,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 1.0,
                          ),
                        ),
                        Text(
                          'Membre depuis ${widget.client.memberSince ?? "2024"}',
                          style: TextStyle(
                            color: Colors.white.withValues(alpha: 0.7),
                            fontSize: widget.screenWidth * 0.025,
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ],
                    ),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: widget.screenWidth * 0.03,
                        vertical: widget.screenWidth * 0.015,
                      ),
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFFD4AF37), Color(0xFFFFD700)],
                        ),
                        borderRadius: BorderRadius.circular(widget.screenWidth * 0.03),
                      ),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            _getDisplayPoints().toString(),
                            style: TextStyle(
                              color: Colors.black,
                              fontSize: widget.screenWidth * 0.045,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            _getPointsLabel(),
                            style: TextStyle(
                              color: Colors.black,
                              fontSize: widget.screenWidth * 0.02,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          // Indication de flip
          Positioned(
            bottom: widget.screenWidth * 0.02,
            right: widget.screenWidth * 0.02,
            child: Container(
              padding: EdgeInsets.all(widget.screenWidth * 0.01),
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(widget.screenWidth * 0.01),
              ),
              child: Icon(
                Icons.flip,
                color: Colors.white.withValues(alpha: 0.6),
                size: widget.screenWidth * 0.04,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBackCard() {
    final displayPoints = _getDisplayPoints();
    
    return Container(
      width: double.infinity,
      height: widget.screenHeight * 0.32,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(widget.screenWidth * 0.04),
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Color(0xFF1A1A1A), // Noir profond
            Color(0xFF2D2D2D), // Gris fonc√©
            Color(0xFF1A1A1A),
          ],
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.3),
            spreadRadius: 3,
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Padding(
        padding: EdgeInsets.all(widget.screenWidth * 0.05),
        child: Column(
          children: [
            // Titre
            Text(
              'CARTE FID√âLIT√â',
              style: TextStyle(
                color: const Color(0xFFD4AF37),
                fontSize: widget.screenWidth * 0.035,
                fontWeight: FontWeight.bold,
                letterSpacing: 1.5,
              ),
            ),
            Text(
              'ART LUXURY BUS',
              style: TextStyle(
                color: Colors.white,
                fontSize: widget.screenWidth * 0.025,
                fontWeight: FontWeight.w400,
                letterSpacing: 1.0,
              ),
            ),
            
            SizedBox(height: widget.screenHeight * 0.02),
            
            // Grille des 11 cases (2 rang√©es de 5 + 1 case cadeau)
            Expanded(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Premi√®re rang√©e (5 cases)
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: List.generate(5, (index) => _buildProgressCircle(index, displayPoints)),
                  ),
                  
                  SizedBox(height: widget.screenHeight * 0.015),
                  
                  // Deuxi√®me rang√©e (5 cases)
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: List.generate(5, (index) => _buildProgressCircle(index + 5, displayPoints)),
                  ),
                  
                  SizedBox(height: widget.screenHeight * 0.015),
                  
                  // Case cadeau gratuit (centr√©e)
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      _buildProgressCircle(10, displayPoints), // 11√®me case (index 10)
                    ],
                  ),
                ],
              ),
            ),
            
            SizedBox(height: widget.screenHeight * 0.01),
            
            // Message de f√©licitations
            Text(
              displayPoints >= 10 ? 'F√©licitations ! Vous pouvez obtenir un ${_getServiceType()} gratuit.' : 
              'Collectez ${10 - displayPoints} points de plus pour un ${_getServiceType()} gratuit.',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.white.withValues(alpha: 0.8),
                fontSize: widget.screenWidth * 0.025,
                fontStyle: FontStyle.italic,
              ),
            ),
            
            // Indication de retour
            Container(
              margin: EdgeInsets.only(top: widget.screenWidth * 0.02),
              padding: EdgeInsets.all(widget.screenWidth * 0.01),
              decoration: BoxDecoration(
                color: Colors.white.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(widget.screenWidth * 0.01),
              ),
              child: Icon(
                Icons.flip,
                color: Colors.white.withValues(alpha: 0.6),
                size: widget.screenWidth * 0.04,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProgressCircle(int index, int displayPoints) {
    final isCompleted = index < displayPoints;
    final isFree = index == 10; // Le 11√®me cercle (index 10) repr√©sente le cadeau
    final canGetFree = displayPoints >= 10; // Peut obtenir le cadeau si 10 points ou plus
    
    return TweenAnimationBuilder<double>(
      duration: Duration(milliseconds: 300 + (index * 50)),
      tween: Tween(begin: 0.0, end: isCompleted || (isFree && canGetFree) ? 1.0 : 0.0),
      builder: (context, value, child) {
        return Container(
          width: isFree ? widget.screenWidth * 0.09 : widget.screenWidth * 0.06, // Cases plus petites
          height: isFree ? widget.screenWidth * 0.09 : widget.screenWidth * 0.06,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: (isCompleted || (isFree && canGetFree))
                ? Color.lerp(Colors.grey.withValues(alpha: 0.3), const Color(0xFFD4AF37), value)
                : Colors.grey.withValues(alpha: 0.3),
            border: Border.all(
              color: (isCompleted || (isFree && canGetFree)) ? const Color(0xFFD4AF37) : Colors.grey.withValues(alpha: 0.5),
              width: 1.5,
            ),
          ),
          child: Center(
            child: isFree
                ? Icon(
                    canGetFree ? Icons.card_giftcard : Icons.card_giftcard_outlined,
                    color: canGetFree ? Colors.black : Colors.white.withValues(alpha: 0.6),
                    size: widget.screenWidth * 0.04,
                  )
                : isCompleted
                    ? Icon(
                        Icons.directions_bus_rounded, // Ic√¥ne de bus au lieu de check
                        color: Colors.black,
                        size: widget.screenWidth * 0.03,
                      )
                    : Text(
                        '${index + 1}',
                        style: TextStyle(
                          color: Colors.white.withValues(alpha: 0.6),
                          fontSize: widget.screenWidth * 0.02,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
          ),
        );
      },
    );
  }

  // Tableau des d√©parts style a√©roport
  Widget _buildDeparturesBoard() {
    // Donn√©es fictives de d√©parts (√† remplacer par des vraies donn√©es de l'API)
    final allDepartures = [
      {'destination': 'Dakar', 'time': '08:30', 'gate': 'A1', 'status': '√Ä l\'heure'},
      {'destination': 'Thi√®s', 'time': '09:15', 'gate': 'A2', 'status': '√Ä l\'heure'},
      {'destination': 'Saint-Louis', 'time': '10:00', 'gate': 'B1', 'status': 'Embarquement'},
      {'destination': 'Kaolack', 'time': '10:45', 'gate': 'B2', 'status': '√Ä l\'heure'},
      {'destination': 'Ziguinchor', 'time': '11:30', 'gate': 'C1', 'status': 'Retard√©'},
      {'destination': 'Tambacounda', 'time': '12:15', 'gate': 'C2', 'status': '√Ä l\'heure'},
      {'destination': 'Kolda', 'time': '13:00', 'gate': 'D1', 'status': '√Ä l\'heure'},
      {'destination': 'Matam', 'time': '13:45', 'gate': 'D2', 'status': '√Ä l\'heure'},
      {'destination': 'Louga', 'time': '14:30', 'gate': 'E1', 'status': 'Embarquement'},
      {'destination': 'K√©dougou', 'time': '15:15', 'gate': 'E2', 'status': '√Ä l\'heure'},
      {'destination': 'S√©dhiou', 'time': '16:00', 'gate': 'F1', 'status': '√Ä l\'heure'},
      {'destination': 'Diourbel', 'time': '16:45', 'gate': 'F2', 'status': '√Ä l\'heure'},
      {'destination': 'Fatick', 'time': '17:30', 'gate': 'G1', 'status': '√Ä l\'heure'},
      {'destination': 'Kaffrine', 'time': '18:15', 'gate': 'G2', 'status': '√Ä l\'heure'},
    ];

    return _DeparturesBoardCarousel(
      allDepartures: allDepartures,
      screenWidth: widget.screenWidth,
      screenHeight: widget.screenHeight,
    );
  }
}

// Widget s√©par√© pour g√©rer le carrousel des d√©parts
class _DeparturesBoardCarousel extends StatefulWidget {
  final List<Map<String, String>> allDepartures;
  final double screenWidth;
  final double screenHeight;

  const _DeparturesBoardCarousel({
    required this.allDepartures,
    required this.screenWidth,
    required this.screenHeight,
  });

  @override
  State<_DeparturesBoardCarousel> createState() => _DeparturesBoardCarouselState();
}

class _DeparturesBoardCarouselState extends State<_DeparturesBoardCarousel> {
  int _currentPage = 0;
  Timer? _carouselTimer;
  static const int _itemsPerPage = 7;
  static const Duration _pageDuration = Duration(seconds: 15);

  @override
  void initState() {
    super.initState();
    _startCarousel();
  }

  @override
  void dispose() {
    _carouselTimer?.cancel();
    super.dispose();
  }

  void _startCarousel() {
    _carouselTimer = Timer.periodic(_pageDuration, (timer) {
      if (mounted) {
        setState(() {
          final totalPages = (widget.allDepartures.length / _itemsPerPage).ceil();
          _currentPage = (_currentPage + 1) % totalPages;
        });
      }
    });
  }

  List<Map<String, String>> _getCurrentDepartures() {
    final startIndex = _currentPage * _itemsPerPage;
    final endIndex = (startIndex + _itemsPerPage).clamp(0, widget.allDepartures.length);
    return widget.allDepartures.sublist(startIndex, endIndex);
  }

  @override
  Widget build(BuildContext context) {
    final departures = _getCurrentDepartures();
    final totalPages = (widget.allDepartures.length / _itemsPerPage).ceil();

    return AnimatedSwitcher(
      duration: const Duration(milliseconds: 800),
      transitionBuilder: (child, animation) {
        return FadeTransition(
          opacity: animation,
          child: SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(0.3, 0),
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: animation,
              curve: Curves.easeOutCubic,
            )),
            child: child,
          ),
        );
      },
      child: Container(
        key: ValueKey<int>(_currentPage),
        width: double.infinity,
        height: widget.screenHeight * 0.32,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(widget.screenWidth * 0.04),
          gradient: const LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Color(0xFF1A1A1A),
              Color(0xFF2D2D2D),
            ],
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.3),
              spreadRadius: 3,
              blurRadius: 15,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          children: [
            // Header style a√©roport
            Container(
              padding: EdgeInsets.all(widget.screenWidth * 0.03),
              decoration: BoxDecoration(
                color: const Color(0xFFD4AF37).withValues(alpha: 0.2),
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(widget.screenWidth * 0.04),
                  topRight: Radius.circular(widget.screenWidth * 0.04),
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.flight_takeoff,
                        color: const Color(0xFFD4AF37),
                        size: widget.screenWidth * 0.05,
                      ),
                      SizedBox(width: widget.screenWidth * 0.02),
                      Text(
                        'D√âPARTS',
                        style: TextStyle(
                          color: const Color(0xFFD4AF37),
                          fontSize: widget.screenWidth * 0.035,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 1.5,
                        ),
                      ),
                    ],
                  ),
                  Row(
                    children: [
                      // Indicateur de page
                      Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: widget.screenWidth * 0.02,
                          vertical: widget.screenWidth * 0.01,
                        ),
                        decoration: BoxDecoration(
                          color: const Color(0xFFD4AF37).withValues(alpha: 0.3),
                          borderRadius: BorderRadius.circular(widget.screenWidth * 0.02),
                        ),
                        child: Text(
                          '${_currentPage + 1}/$totalPages',
                          style: TextStyle(
                            color: const Color(0xFFD4AF37),
                            fontSize: widget.screenWidth * 0.025,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      SizedBox(width: widget.screenWidth * 0.02),
                      Text(
                        DateTime.now().toString().substring(11, 16),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: widget.screenWidth * 0.03,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            // Tableau des d√©parts avec carousel
            Expanded(
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 800),
                transitionBuilder: (Widget child, Animation<double> animation) {
                  return FadeTransition(
                    opacity: animation,
                    child: SlideTransition(
                      position: Tween<Offset>(
                        begin: const Offset(0.3, 0.0),
                        end: Offset.zero,
                      ).animate(CurvedAnimation(
                        parent: animation,
                        curve: Curves.easeOutCubic,
                      )),
                      child: child,
                    ),
                  );
                },
                child: ListView.builder(
                  key: ValueKey<int>(_currentPage),
                  padding: EdgeInsets.zero,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: departures.length,
                  itemBuilder: (context, index) {
                    final departure = departures[index];
                    final isDelayed = departure['status'] == 'Retard√©';
                    final isBoarding = departure['status'] == 'Embarquement';
                    
                    return Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: widget.screenWidth * 0.03,
                        vertical: widget.screenWidth * 0.02,
                      ),
                      decoration: BoxDecoration(
                        border: Border(
                          bottom: BorderSide(
                            color: Colors.white.withValues(alpha: 0.1),
                            width: 0.5,
                          ),
                        ),
                      ),
                      child: Row(
                        children: [
                          // Heure
                          SizedBox(
                            width: widget.screenWidth * 0.12,
                            child: Text(
                              departure['time']!,
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: widget.screenWidth * 0.032,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          
                          // Destination
                          Expanded(
                            child: Text(
                              departure['destination']!,
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: widget.screenWidth * 0.03,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                          
                          // Porte
                          SizedBox(
                            width: widget.screenWidth * 0.08,
                            child: Text(
                              departure['gate']!,
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                color: const Color(0xFFD4AF37),
                                fontSize: widget.screenWidth * 0.03,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          
                          // Statut
                          Container(
                            width: widget.screenWidth * 0.25,
                            padding: EdgeInsets.symmetric(
                              horizontal: widget.screenWidth * 0.02,
                              vertical: widget.screenWidth * 0.01,
                            ),
                            decoration: BoxDecoration(
                              color: isDelayed
                                  ? Colors.red.withValues(alpha: 0.2)
                                  : isBoarding
                                      ? Colors.green.withValues(alpha: 0.2)
                                      : Colors.blue.withValues(alpha: 0.2),
                              borderRadius: BorderRadius.circular(widget.screenWidth * 0.02),
                            ),
                            child: Text(
                              departure['status']!,
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                color: isDelayed
                                    ? Colors.red
                                    : isBoarding
                                        ? Colors.green
                                        : Colors.blue,
                                fontSize: widget.screenWidth * 0.022,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _startAutoFlip() {
    _autoFlipTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      if (mounted && !_controller.isAnimating) {
        _flip();
      }
    });
  }

  // M√©thodes helper pour le type de carte sp√©cifique
  int _getDisplayPoints() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return widget.client.pointsTickets;
      case LoyaltyCardType.courriers:
        return widget.client.pointsCourriers;
      case LoyaltyCardType.combined:
        return widget.client.totalPoints;
    }
  }

  String _getPointsLabel() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return 'TICKETS';
      case LoyaltyCardType.courriers:
        return 'COURRIERS';
      case LoyaltyCardType.combined:
        return 'POINTS';
    }
  }

  String _getServiceType() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return 'ticket';
      case LoyaltyCardType.courriers:
        return 'envoi de courrier';
      case LoyaltyCardType.combined:
        return 'service';
    }
  }
}

// Widget √âtat de la classe _DeparturesBoardCarousel
class _DeparturesBoardCarouselState extends State<_DeparturesBoardCarousel> {
  int _currentPage = 0;
  Timer? _carouselTimer;
  final int _itemsPerPage = 7;

  @override
  void initState() {
    super.initState();
    _startCarousel();
  }

  @override
  void dispose() {
    _carouselTimer?.cancel();
    super.dispose();
  }

  void _startCarousel() {
    _carouselTimer = Timer.periodic(const Duration(seconds: 15), (timer) {
      if (mounted) {
        setState(() {
          final totalPages = (widget.allDepartures.length / _itemsPerPage).ceil();
          _currentPage = (_currentPage + 1) % totalPages;
        });
      }
    });
  }

  List<Map<String, String>> _getCurrentDepartures() {
    final startIndex = _currentPage * _itemsPerPage;
    final endIndex = (startIndex + _itemsPerPage).clamp(0, widget.allDepartures.length);
    return widget.allDepartures.sublist(startIndex, endIndex);
  }

  @override
  Widget build(BuildContext context) {
    final departures = _getCurrentDepartures();
    final totalPages = (widget.allDepartures.length / _itemsPerPage).ceil();

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF1A1A2E),
            const Color(0xFF0F0F1E),
          ],
        ),
        borderRadius: BorderRadius.circular(widget.screenWidth * 0.03),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.3),
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-t√™te
          Container(
            padding: EdgeInsets.all(widget.screenWidth * 0.03),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: const Color(0xFFD4AF37).withValues(alpha: 0.3),
                  width: 1,
                ),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.flight_takeoff,
                      color: const Color(0xFFD4AF37),
                      size: widget.screenWidth * 0.05,
                    ),
                    SizedBox(width: widget.screenWidth * 0.02),
                    Text(
                      'D√âPARTS',
                      style: TextStyle(
                        color: const Color(0xFFD4AF37),
                        fontSize: widget.screenWidth * 0.035,
                        fontWeight: FontWeight.bold,
                        letterSpacing: 1.5,
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    // Indicateur de page
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: widget.screenWidth * 0.02,
                        vertical: widget.screenWidth * 0.01,
                      ),
                      decoration: BoxDecoration(
                        color: const Color(0xFFD4AF37).withValues(alpha: 0.3),
                        borderRadius: BorderRadius.circular(widget.screenWidth * 0.02),
                      ),
                      child: Text(
                        '${_currentPage + 1}/$totalPages',
                        style: TextStyle(
                          color: const Color(0xFFD4AF37),
                          fontSize: widget.screenWidth * 0.025,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    SizedBox(width: widget.screenWidth * 0.02),
                    Text(
                      DateTime.now().toString().substring(11, 16),
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: widget.screenWidth * 0.03,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          // Tableau des d√©parts avec carousel
          Expanded(
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 800),
              transitionBuilder: (Widget child, Animation<double> animation) {
                return FadeTransition(
                  opacity: animation,
                  child: SlideTransition(
                    position: Tween<Offset>(
                      begin: const Offset(0.3, 0.0),
                      end: Offset.zero,
                    ).animate(CurvedAnimation(
                      parent: animation,
                      curve: Curves.easeOutCubic,
                    )),
                    child: child,
                  ),
                );
              },
              child: ListView.builder(
                key: ValueKey<int>(_currentPage),
                padding: EdgeInsets.zero,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: departures.length,
                itemBuilder: (context, index) {
                  final departure = departures[index];
                  final isDelayed = departure['status'] == 'Retard√©';
                  final isBoarding = departure['status'] == 'Embarquement';
                  
                  return Container(
                    padding: EdgeInsets.symmetric(
                      horizontal: widget.screenWidth * 0.03,
                      vertical: widget.screenWidth * 0.02,
                    ),
                    decoration: BoxDecoration(
                      border: Border(
                        bottom: BorderSide(
                          color: Colors.white.withValues(alpha: 0.1),
                          width: 0.5,
                        ),
                      ),
                    ),
                    child: Row(
                      children: [
                        // Heure
                        SizedBox(
                          width: widget.screenWidth * 0.12,
                          child: Text(
                            departure['time']!,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: widget.screenWidth * 0.032,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        
                        // Destination
                        Expanded(
                          child: Text(
                            departure['destination']!,
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: widget.screenWidth * 0.03,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                        
                        // Porte
                        SizedBox(
                          width: widget.screenWidth * 0.08,
                          child: Text(
                            departure['gate']!,
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: const Color(0xFFD4AF37),
                              fontSize: widget.screenWidth * 0.03,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        
                        // Statut
                        Container(
                          width: widget.screenWidth * 0.25,
                          padding: EdgeInsets.symmetric(
                            horizontal: widget.screenWidth * 0.02,
                            vertical: widget.screenWidth * 0.01,
                          ),
                          decoration: BoxDecoration(
                            color: isDelayed
                                ? Colors.red.withValues(alpha: 0.2)
                                : isBoarding
                                    ? Colors.green.withValues(alpha: 0.2)
                                    : Colors.blue.withValues(alpha: 0.2),
                            borderRadius: BorderRadius.circular(widget.screenWidth * 0.02),
                          ),
                          child: Text(
                            departure['status']!,
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: isDelayed
                                  ? Colors.red
                                  : isBoarding
                                      ? Colors.green
                                      : Colors.blue,
                              fontSize: widget.screenWidth * 0.022,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Classe de l'√©tat _LoyaltyCardState reste inchang√©e (m√©thodes helper)
class _ExtraMethodsForLoyaltyCard {
  void _startAutoFlip() {
    // Cette m√©thode appartient √† _LoyaltyCardState, pas √† _DeparturesBoardCarouselState
  }

  int _getDisplayPoints() {
    return 0; // placeholder
  }

  String _getPointsLabel() {
    return '';
  }

  String _getServiceType() {
    return '';
  }
}
            ),
            
            // Tableau des d√©parts
            Expanded(
              child: ListView.builder(
                padding: EdgeInsets.zero,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: departures.length,
                itemBuilder: (context, index) {
                  final departure = departures[index];
                  final isDelayed = departure['status'] == 'Retard√©';
                  final isBoarding = departure['status'] == 'Embarquement';
                  
                  return Container(
                    padding: EdgeInsets.symmetric(
                      horizontal: widget.screenWidth * 0.03,
                      vertical: widget.screenWidth * 0.02,
                    ),
                    decoration: BoxDecoration(
                      border: Border(
                    SizedBox(width: widget.screenWidth * 0.02),
                    Text(
                      'D√âPARTS',
                      style: TextStyle(
                        color: const Color(0xFFD4AF37),
                        fontSize: widget.screenWidth * 0.035,
                        fontWeight: FontWeight.bold,
                        letterSpacing: 1.5,
                      ),
                    ),
                  ],
                ),
                Text(
                  DateTime.now().toString().substring(11, 16),
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: widget.screenWidth * 0.03,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          
          // Tableau des d√©parts
          Expanded(
            child: ListView.builder(
              padding: EdgeInsets.zero,
              itemCount: departures.length,
              itemBuilder: (context, index) {
                final departure = departures[index];
                final isDelayed = departure['status'] == 'Retard√©';
                final isBoarding = departure['status'] == 'Embarquement';
                
                return Container(
                  padding: EdgeInsets.symmetric(
                    horizontal: widget.screenWidth * 0.03,
                    vertical: widget.screenWidth * 0.02,
                  ),
                  decoration: BoxDecoration(
                    border: Border(
                      bottom: BorderSide(
                        color: Colors.white.withValues(alpha: 0.1),
                        width: 0.5,
                      ),
                    ),
                  ),
                  child: Row(
                    children: [
                      // Heure
                      SizedBox(
                        width: widget.screenWidth * 0.12,
                        child: Text(
                          departure['time']!,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: widget.screenWidth * 0.032,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      
                      // Destination
                      Expanded(
                        child: Text(
                          departure['destination']!,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: widget.screenWidth * 0.03,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                      
                      // Porte
                      Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: widget.screenWidth * 0.02,
                          vertical: widget.screenWidth * 0.01,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.white.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(widget.screenWidth * 0.01),
                        ),
                        child: Text(
                          departure['gate']!,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: widget.screenWidth * 0.025,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                      
                      SizedBox(width: widget.screenWidth * 0.02),
                      
                      // Statut
                      Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: widget.screenWidth * 0.02,
                          vertical: widget.screenWidth * 0.01,
                        ),
                        decoration: BoxDecoration(
                          color: isDelayed 
                              ? Colors.red.withValues(alpha: 0.2)
                              : isBoarding
                                  ? Colors.green.withValues(alpha: 0.2)
                                  : Colors.blue.withValues(alpha: 0.2),
                          borderRadius: BorderRadius.circular(widget.screenWidth * 0.01),
                        ),
                        child: Text(
                          departure['status']!,
                          style: TextStyle(
                            color: isDelayed 
                                ? Colors.red
                                : isBoarding
                                    ? Colors.green
                                    : Colors.blue,
                            fontSize: widget.screenWidth * 0.022,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void _startAutoFlip() {
    _autoFlipTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      if (mounted && !_controller.isAnimating) {
        _flip();
      }
    });
  }

  // M√©thodes helper pour le type de carte sp√©cifique
  int _getDisplayPoints() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return widget.client.pointsTickets;
      case LoyaltyCardType.courriers:
        return widget.client.pointsCourriers;
      case LoyaltyCardType.combined:
        return widget.client.totalPoints;
    }
  }

  String _getPointsLabel() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return 'TICKETS';
      case LoyaltyCardType.courriers:
        return 'COURRIERS';
      case LoyaltyCardType.combined:
        return 'POINTS';
    }
  }

  String _getServiceType() {
    switch (widget.cardType) {
      case LoyaltyCardType.tickets:
        return 'ticket';
      case LoyaltyCardType.courriers:
        return 'envoi de courrier';
      case LoyaltyCardType.combined:
        return 'service';
    }
  }
}
